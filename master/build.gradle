apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                includeCompileClasspath true
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }

    resourcePrefix "app_"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":base:common-core-library")
    //view
    implementation rootProject.ext.androidx.constraintlayout
    //tools
    annotationProcessor rootProject.ext.dependencies.arouterCompiler
    //test
    testImplementation rootProject.ext.test.juint
    androidTestImplementation rootProject.ext.test.testRunner
    androidTestImplementation rootProject.ext.test.testEspresso
    //dagger apt
    annotationProcessor rootProject.ext.dependencies.dagger2Compiler
    annotationProcessor rootProject.ext.dependencies.dagger2AndroidProcessor
    //moudle
    if (!isBuildModule.toBoolean()) {
        //在宿主 App 中使用 implementation 依赖业务组件, 业务组件的代码就会完全暴露给宿主 App, 不利于代码的隔离
        //使用 runtimeOnly 依赖业务组件, 可实现业务组件的代码在编译时对宿主 App 不可见, 仅在运行时对宿主 App 可见
        runtimeOnly project(":moudle_1")
    }

}
